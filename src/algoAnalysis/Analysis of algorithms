1. talk about time taken for a program:
a. it depends upon computer you are running.
b. programming languages(C and C++ are complied language while java and py are interpreted)
c. System load

What is asymptotic analysis
-> The idea is to measure order of growth
-> Does not depend upon machine , programming language.
-> No need to implement , we can analyze algorithm.

Given two algorithms for a task, how do we find out which one is better?
One naive way of doing this is – to implement both the algorithms and run the two programs on your computer for different inputs and see which one takes less time. There are many problems with this approach for the analysis of algorithms.

It might be possible that for some inputs, the first algorithm performs better than the second. And for some inputs second performs better.
It might also be possible that for some inputs, the first algorithm performs better on one machine, and the second works better on another machine for some other inputs.
Asymptotic Analysis is the big idea that handles the above issues in analyzing algorithms. In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don’t measure the actual running time). We calculate, how the time (or space) taken by an algorithm increases with the input size.

For example, let us consider the search problem (searching a given item) in a sorted array.

Linear Search (order of growth is linear)
Binary Search (order of growth is logarithmic).
To understand how Asymptotic Analysis solves the problems mentioned above in analyzing algorithms,

let us say:
we run the Linear Search on a fast computer A and
Binary Search on a slow computer B and
pick the constant values for the two computers so that it tells us exactly how long it takes for the given machine to perform the search in seconds.
Let’s say the constant for A is 0.2 and the constant for B is 1000 which means that A is 5000 times more powerful than B.
For small values of input array size n, the fast computer may take less time.
But, after a certain value of input array size, the Binary Search will definitely start taking less time compared to the Linear Search even though the Binary Search is being run on a slow machine.
Input Size	Running time on A	Running time on B
10	2 sec	~ 1 h
100	20 sec	~ 1.8 h
10^6 	~ 55.5 h	~ 5.5 h
10^9	~ 6.3 years 	~ 8.3 h
The reason is the order of growth of Binary Search with respect to input size is logarithmic while the order of growth of Linear Search is linear.
So the machine-dependent constants can always be ignored after a certain value of input size.
Running times for this example:

Linear Search running time in seconds on A: 0.2 * n
Binary Search running time in seconds on B: 1000*log(n)